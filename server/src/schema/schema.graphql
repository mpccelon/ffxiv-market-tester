input Pagination {
    page: Int!
    items: Int!
}

input UserFilter {
    id: ID
    username: String
}
type User {
    id: ID!
    username: String!
    recipes: [Recipe!]
}

type AuthToken {
    token: String!
    user: User!
}

input ItemFilter {
    name: String!
}
type Item {
    id: ID!
    name: String!
    is_craftable: Boolean!
    market_price: Int
}

type Ingredient {
    id: ID!
    item: Item!
    quantity: Int!
}

type Recipe {
    id: ID!
    result_item: Item!
    ingredients: [Ingredient!]!
    yield: Int!
}

type Query {
    # User
    getUsers(filter: UserFilter, pagination: Pagination): [User!]!

    # Get Items
    getItems(filter: ItemFilter, pagination: Pagination, fetchMarketPrices: Boolean): [Item!]!

    # Get Saved Recipes (for currently logged in user)
    getSavedRecipes(pagination: Pagination, fetchMarketPrices: Boolean): [Recipe!]!

    # Get recipe details
    getRecipeFromId(recipe_id: ID!, fetchMarketPrices: Boolean): Recipe!
    getRecipesFromItem(item_id: ID!, fetchMarketPrices: Boolean): [Recipe!]!
}

type Mutation {
    # user
    createUser(username: String!, password: String!): AuthToken!
    updateUser(id: ID!, username: String, password: String): User
    deleteUser(id: ID!): Boolean!

    # user login
    login (username: String!, password: String!): AuthToken!

    # recipe (for currently logged in user)
    saveRecipe(recipe_id: ID!): User
    removeSavedRecipe(recipe_id: ID!): User
}